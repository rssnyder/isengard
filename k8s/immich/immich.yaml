apiVersion: v1
kind: Namespace
metadata:
  name: immich

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cache
  namespace: immich
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-path
  resources:
    requests:
      storage: 5G

---
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: db
  namespace: immich
spec:
  imageName: ghcr.io/tensorchord/cloudnative-pgvecto.rs:15-v0.3.0
  instances: 1
  enableSuperuserAccess: true
  storage:
    size: 2Gi
  monitoring:
    enablePodMonitor: true
  bootstrap:
    initdb:
      database: immich
      owner: app
      postInitSQL:
        - ALTER SYSTEM SET search_path TO "$user", public, vectors;
        - CREATE EXTENSION IF NOT EXISTS "vectors";
  postgresql:
    shared_preload_libraries:
      - "vectors.so"
  backup:
    retentionPolicy: "30d"
    barmanObjectStore:
      destinationPath: "s3://cnpg/immich-new"
      endpointURL: https://s3.rileysnyder.dev
      s3Credentials:
        accessKeyId:
          name: minio
          key: AWS_ACCESS_KEY_ID
        secretAccessKey:
          name: minio
          key: AWS_SECRET_ACCESS_KEY
      wal:
        compression: gzip
      data:
        compression: gzip

# for recovery

  bootstrap:
    recovery:
      source: db

  externalClusters:
    - name: db
      barmanObjectStore:
        destinationPath: "s3://cnpg/immich"
        endpointURL: https://s3.rileysnyder.dev
        s3Credentials:
          accessKeyId:
            name: minio
            key: AWS_ACCESS_KEY_ID
          secretAccessKey:
            name: minio
            key: AWS_SECRET_ACCESS_KEY

---
apiVersion: postgresql.cnpg.io/v1
kind: ScheduledBackup
metadata:
  name: db-hourly
  namespace: immich
spec:
  schedule: "0 0 * * * *"
  backupOwnerReference: cluster
  immediate: true
  cluster:
    name: db

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: server
  namespace: immich
spec:
  replicas: 1
  selector:
    matchLabels:
      app: server
  template:
    metadata:
      labels:
        app: server
    spec:
      volumes:
      - name: zira
        nfs:
          server: 192.168.2.6
          path: /scratch/immich
      containers:
      - name: server
        image: ghcr.io/immich-app/immich-server:release
        imagePullPolicy: IfNotPresent
        env:
        - name: REDIS_HOSTNAME
          value: redis.redis.svc.cluster.local
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: db-superuser
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-superuser
              key: password
        - name: DB_HOSTNAME
          valueFrom:
            secretKeyRef:
              name: db-superuser
              key: host
        ports:
        - name: http
          containerPort: 2283
        volumeMounts:
        - name: zira
          mountPath: /usr/src/app/upload

---
apiVersion: v1
kind: Service
metadata:
  name: http
  namespace: immich
spec:
  type: LoadBalancer
  selector:
    app: server
  ports:
  - name: http
    port: 80
    targetPort: http

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: machine-learning
  namespace: immich
spec:
  replicas: 1
  selector:
    matchLabels:
      app: machine-learning
  template:
    metadata:
      labels:
        app: machine-learning
    spec:
      containers:
      - name: machine-learning
        image: ghcr.io/immich-app/immich-machine-learning:release
        imagePullPolicy: IfNotPresent
        ports:
        - name: api
          containerPort: 3003
        volumeMounts:
        - name: cache
          mountPath: /cache
      volumes:
      - name: cache
        persistentVolumeClaim:
          claimName: cache

---
apiVersion: v1
kind: Service
metadata:
  name: immich-machine-learning
  namespace: immich
spec:
  type: LoadBalancer
  selector:
    app: machine-learning
  ports:
  - name: api
    port: 3003
    targetPort: api

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: immich
  namespace: immich
spec:
  ingressClassName: nginx
  rules:
    - host: immich.k8s.rileysnyder.dev
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name:  http
                port:
                  number: 80
