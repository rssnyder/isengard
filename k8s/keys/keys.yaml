apiVersion: v1
kind: Namespace
metadata:
  name: keys

---
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: minio
  namespace: keys
spec:
  encryptedData:
    AWS_ACCESS_KEY_ID: AgBVuitn6fcj11Xa9yKDELCpuUdEsNQ1NA+nyjb8HoODHPDM+BUcobCOOY2/igfUNi6E7rWORRvxTj1Vj2yyY8dyRJ9iPt1b+CrxnIUswr7isXxxFOiLA/M+GesGzreSbu0RVHSyenO6G+ZD47gzK/Z8mIqG+eIPERCJbvcCaRdVYuL8lORUUreXKgxn60g4V0rFKnNvDGgzox7mJr1aEYz2v4KCkNLCCcjczRYG+GYpg+/XSi8oDfEtW+HZFEgk8h5eafUnQiTnlJkzBQ7kR5woBYFVWQSiBTXZn02Z3eZk4KLZ9xP3hnVwn+nlHvCd6UVbaokALCVio7H9zNyvMHyzn1IJAco0rXI5Lu6PG7U2A+yGMQgzJ/jSTrKQE1Lk5RrREQyt5yyvf9eoj+j8f7twfnUsWVgwLDVREBcmoBWFU5rzq5oQ+Tg1KlDVXxeh53v4NPxEUco+M9J0BCmZKWEeXsXsHJCvzObpbnb0US/CRjMW0Re0d4qTVdfzEb6p4LKVkht07UIxig4w141R3jRr5pFBaLxAyf10brFdG1MjAvLXzVWlD62jrHoMYOXIVr/JYQB4WkwC+q48DXRNHsLiFfNpBjZp5OVlbBe9NvXyJzVR0MsV55L18jtppV69M5tldZFDzJnH/U9fKTBbLhwTDwcoqw+aJYTBPYUMuK5S9yNBUc/P+WTne8RqoWA3LokLIg03SVV+83RVThwCba1tZ6TOAQ==
    AWS_SECRET_ACCESS_KEY: AgBerBbgiHTUdPfameIPOZOaN0SG5WcGFVl+lXR3ZWoU/gtk5q4yJMRGZ0UpMzj8ksaaQoiHgbUWlV9i8zAMxhxOegjxZCom+paQWyeVwgUxV0X1H69Xume+yw7Kb5/nTuVag95LUzY3IQzGB8usaUhMK7zccgbVHY2H9YUeMSiTR/UTaSiYKktqWImt4WQ6XVztrXvSjlZP/tzixKiMnJij3BkU+Tiu7McY2rkjVlugGqJg6ULPXUjumi55DPTC9QSnW1Z0hFkvoJJVawHhccqUY19sF/JZ6ccQ4LcZHQL2yep1bCg3jgdPmKzY/cUFVg6WcvJr49x0cDW+Dolsp/EuU9cbgVUk8209+XWkLnId2fOQT0Lyr5vbZt8ZFKS5O3eM/5j9RZarlAFMDGwLIXzvjCzuNh2rGOHVf6dXA3GkzNsTh57JicjspOcqX36ZEPu89VbQ+czNhiPo5a4rFt+ulpAD/XBVE+7zcoQFJTLm9Aad1TqqlV7Id7O9DHpPPdio1x9CcN7DNoAOVHKH5Tb7mYdg4uPoOmsrNyRm4MLRYQHBrL1DgoDBzGqyqjs68Og6IouOxsU1HWFaj2/fFIcM3CbL+4I4HDsOvEl3Bh7rVgKtiZ6VXW2PDSfRQ/nmy8BQKXIMx103OlehVIiZbKxtGtfaZumyyVpq+6B01J7h+xkxtPxY6eF1/9q/q+uCSuYDLq7qQWepHPPmGL9Ki6WyBzuiooFUwUfEaWYK9vLipxzXCgEcgvF5

---
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: db
  namespace: keys
spec:
  instances: 1
  storage:
    size: 1Gi
    storageClass: local-path
  monitoring:
    enablePodMonitor: true
  backup:
    retentionPolicy: "7d"
    barmanObjectStore:
      destinationPath: "s3://cnpg/micro/keys"
      endpointURL: https://s3.rileysnyder.dev
      s3Credentials:
        accessKeyId:
          name: minio
          key: AWS_ACCESS_KEY_ID
        secretAccessKey:
          name: minio
          key: AWS_SECRET_ACCESS_KEY
      wal:
        compression: gzip
      data:
        compression: gzip

---
apiVersion: postgresql.cnpg.io/v1
kind: ScheduledBackup
metadata:
  name: db
  namespace: keys
spec:
  schedule: "0 0 */6 * * *"
  backupOwnerReference: cluster
  immediate: false
  cluster:
    name: db

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keys
  namespace: keys
spec:
  replicas: 1
  selector:
    matchLabels:
      app: keys
  template:
    metadata:
      labels:
        app: keys
    spec:
      containers:
      - name: keys
        image: rssnyder/keys:test
        imagePullPolicy: IfNotPresent
        env:
        - name: GIN_MODE
          value: release
        - name: PG_DB
          valueFrom:
            secretKeyRef:
              name: db-app
              key: dbname
        - name: PG_USER
          valueFrom:
            secretKeyRef:
              name: db-app
              key: username
        - name: PG_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-app
              key: password
        - name: PG_HOST
          valueFrom:
            secretKeyRef:
              name: db-app
              key: host
        ports:
        - name: api
          containerPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: keys
  namespace: keys
spec:
  type: LoadBalancer
  selector:
    app: keys
  ports:
  - name: web
    port: 80
    targetPort: api

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: keys
  namespace: keys
spec:
  ingressClassName: nginx
  rules:
    - host: keys.rileysnyder.dev
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name:  keys
                port:
                  number: 80

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keys-k8s
  namespace: keys
spec:
  replicas: 1
  selector:
    matchLabels:
      app: keys-k8s
  template:
    metadata:
      labels:
        app: keys-k8s
    spec:
      containers:
      - name: keys
        image: rssnyder/keys:test
        imagePullPolicy: IfNotPresent
        env:
        - name: GIN_MODE
          value: release
        - name: PG_DB
          valueFrom:
            secretKeyRef:
              name: db-app
              key: dbname
        - name: PG_USER
          valueFrom:
            secretKeyRef:
              name: db-app
              key: username
        - name: PG_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-app
              key: password
        - name: PG_HOST
          valueFrom:
            secretKeyRef:
              name: db-app
              key: host
        ports:
        - name: api
          containerPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: keys-k8s
  namespace: keys
spec:
  type: LoadBalancer
  selector:
    app: keys-k8s
  ports:
  - name: web
    port: 80
    targetPort: api

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: keys-k8s
  namespace: keys
spec:
  ingressClassName: nginx
  rules:
    - host: keys.k8s.rileysnyder.dev
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name:  keys-k8s
                port:
                  number: 80